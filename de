#!/usr/bin/env perl
#
#ver http://stackoverflow.com/a/26547845
#
use strict;
use YAML qw(LoadFile DumpFile);
use Getopt::Std;
use Cwd;
use Data::Dumper;
use File::Spec;
use File::Basename;

our $VERSION=2.0.1;

my $CONFIG_FILE = '.de';

my %DEFAULT_ENV = (
    TERM => 'xterm-256color'
);

my @current_path = File::Spec->splitdir(

    File::Spec->rel2abs(

        File::Spec->curdir()
    )
);


my $DEFAULT_PROJECT_NAME = pop @current_path;
my $REAL_GROUP_ID = (split(' ', $())[0];

my $CONFIG = {
    project => $DEFAULT_PROJECT_NAME,
    container => undef,
    image => undef,
    
    project_volume => File::Spec->join(
        File::Spec->rootdir,
        'home',
        scalar(getpwuid($<)),
        $DEFAULT_PROJECT_NAME
    ),
    ports => [],
    volumes => [],
    links => [],
    action => 'exec',
    container_username => scalar(getpwuid($<)),
    container_group => scalar(getgrgid($REAL_GROUP_ID)),
    
    homedir => File::Spec->join(
    
        File::Spec->rootdir(),
        'home',
        scalar(getpwuid($<))
    ),
    
    user_id => $<,
    
    group_id => $REAL_GROUP_ID,

    env => [],
};
&read_config;
&load_command_line_args;

if($CONFIG->{action} eq 'start'){
    $CONFIG->{container} ||= $CONFIG->{project}.'_'.int(rand(100));
    &create_container;
    &save_config;
}
elsif($CONFIG->{action} eq 'exec'){

    my $sh_cmd = &build_command(@ARGV);
    &execute_command(@$sh_cmd);
}
elsif($CONFIG->{action} =~  /^delete|drop|rm|remove$/i){
    &delete_image();
}



#########################################################################

sub current_path_relative_to_project_root {
    my $current_abs_path = File::Spec->rel2abs(File::Spec->curdir());

    my @current_abs_path = File::Spec->splitdir($current_abs_path);

    my $rel_path = File::Spec->curdir();

    my @slices = ();

    while(@current_abs_path > 0){

        if(-e File::Spec->join($rel_path, $CONFIG_FILE)){

            return File::Spec->join(@slices, File::Spec->curdir());
        }

        unshift @slices, pop(@current_abs_path);

        $rel_path = File::Spec->join(File::Spec->updir(), $rel_path);
    }

}

sub abs_root_path {

    my $current_abs_path = File::Spec->rel2abs(File::Spec->curdir());
    my @current_abs_path = File::Spec->splitdir($current_abs_path);
    my $rel_path = File::Spec->curdir();

    while(@current_abs_path > 0 ){
        if(-e File::Spec->join($rel_path, $CONFIG_FILE)){

            return File::Spec->join(@current_abs_path);
        }

        pop(@current_abs_path);

        $rel_path = File::Spec->join(File::Spec->updir(), $rel_path);

    }

}

sub build_command {
    my @args = @_;

    die("Falta comando a ejecutar en container") unless(@args);

    my $cmd = join (' ', @args);

    my $current_path = File::Spec->join(
    
        $CONFIG->{project_volume}, 
    
        &current_path_relative_to_project_root()
    );

    return [@args];


    #if($CONFIG->{root}){
    #
    #    [
    #        'sh', 
    #        '-c', 
    #        "cd $current_path && $cmd"
    #    ];

    #}
    #else{

    #    [
    #        'su', 
    #        '-c', 
    #        "cd $current_path && ".&build_env.$cmd, 
    #        $CONFIG->{container_username}
    #    ];
    #}
}

sub build_env {

    my $env = {};

    if(ref($CONFIG->{env}) eq 'ARRAY'){

        foreach my $env_var (@{$CONFIG->{env}}){
            
            my ($key, $val)  = split '=', $env_var;

            $env->{$key} = $val;
        }
    }
    elsif(ref($CONFIG->{env}) eq 'HASH'){
        $env = $CONFIG->{env};
    }


    $env = {(%$env, %DEFAULT_ENV)};
    
    $env;
    
}

#sub execute_command {
#    my (@sh_cmd) = @_;
#
#    die("container not specified") unless($CONFIG->{container});
#
#    run_cmd("docker start $CONFIG->{container}");# > /dev/null");
#    
#    my @docker_command = ("docker exec -ti $CONFIG->{container}", @sh_cmd);
#    
#    print "Executing ".join(' ', @docker_command)." ...\n";
#
#    run_cmd(@docker_command);
#
#}

sub execute_command{
    my (@sh_cmd) = @_;
    die("image not specified") unless($CONFIG->{image});

    my $container_name = &generate_container_name();
    
    my @command = qw(docker run -ti);
    
    if($CONFIG->{commit}){
        push @command, ('--name', $container_name);
    }
    else{
       push @command, "--rm";
    }

    unless($CONFIG->{root}){
        push @command, ('-e', 'USER='.$ENV{USER});
        push @command, ('-e', 'USERID='.$<);
        push @command, ('-u', $<);
    }

    push @command, ("-v", File::Spec->rel2abs(File::Spec->curdir()).':'.$CONFIG->{project_volume});
    push @command, ('-w', $CONFIG->{project_volume});


    # volumes extra
    foreach my $vol (@{$CONFIG->{volumes}}){
        
        my @part = split ':', $vol;

        my $local_path;

        my $root = File::Spec->rootdir();

        if($part[0] =~ qr!^$root!x ){
            $local_path = $part[0]
        }
        else{
            $local_path = File::Spec->rel2abs(&abs_root_path.'/'.$part[0]);
        }

        push @command, ('-v', $local_path.':'.$part[1]);
        
    }

    # env vars definied en config
    my $env = &build_env;
    while(my ($k,$v) = each(%$env)){
        push @command, ('-e', "$k=$v");
    }

    # links
    foreach my $link (@{$CONFIG->{links}}){
        push @command, ('--link', $link);
    }
    
    # ports 
    foreach my $port (@{$CONFIG->{ports}}){ 
        push @command, ("-p", $port);
    }

    push @command, ($CONFIG->{image}, @sh_cmd);

    run_cmd(@command);

    if(my $tag = $CONFIG->{commit}){
        commit_container($container_name, $CONFIG->{image}.":$tag")
    }
}


sub generate_container_name {
    use Time::HiRes qw(time);

    time;
}


sub commit_container{
    my ($container, $image) = @_;

    run_cmd(
        "docker commit $container $image"
    );

    # limpamos container
    run_cmd(
        "docker rm -f -v $container"
    );
}


sub create_container {
    die("image not specified") unless($CONFIG->{image});

    # actualizamos imagen
    print "Actualizando imagen local ".$CONFIG->{image}."\n";
    run_cmd("docker pull ".$CONFIG->{image});
    

    # creamos container con un volumen asociado al proyecto
    my @command  = qw(docker run);
    push @command, ('--name', $CONFIG->{container});
    push @command, ("-v", File::Spec->rel2abs(File::Spec->curdir()).':'.$CONFIG->{project_volume});
    push @command, ('-w', $CONFIG->{project_volume});
    
    # volumes extra
    foreach my $vol (@{$CONFIG->{volumes}}){
        
        my @part = split ':', $vol;

        push @command, ('-v', File::Spec->rel2abs($part[0]).':'.$part[1]);
        
    }

    # env vars definied en config
    foreach my $e (split(' ', &build_env)){
        push @command, ('-e', $e);
    }

    # links
    foreach my $link (@{$CONFIG->{links}}){
        push @command, ('--link', $link);
    }
    
    # ports 
    foreach my $port (@{$CONFIG->{ports}}){ 
        push @command, ("-p", $port);
    }

    # detached
    push @command, '-d';

    # arrancamos o container esperando indefinidamente
    push @command, ($CONFIG->{image}, 'tail','-f', '/dev/null');

    # creamos container
    print "Creating container $CONFIG->{container}...";
    #print join ' ', @command;
    run_cmd(@command);

    # creamos usuario e homedir dentro de container
    my $new_cmd = "docker exec $CONFIG->{container} /bin/bash -c '" . &create_user_cmd . "'";
    run_cmd($new_cmd);

}

sub delete_image{
    die("image not specified") unless ($CONFIG->{image});
    print "Removing image ".$CONFIG->{image}." ...";
    run_cmd("docker rmi $CONFIG->{image}");
}

sub create_user_cmd{
    "groupadd -f --gid $CONFIG->{group_id} $CONFIG->{container_group} && \ 
useradd -u $CONFIG->{user_id} -g $CONFIG->{container_group} $CONFIG->{container_username} && \ 
mkdir --parent $CONFIG->{homedir} && \ 
chown -R $CONFIG->{container_username}:$CONFIG->{container_group} $CONFIG->{homedir}"

}


sub read_config {
 
    my $config_path = File::Spec->join(
        &abs_root_path,
        $CONFIG_FILE
    );

    return unless -e $config_path;

    my $data = LoadFile($config_path);

    while(my ($k, $v) = each(%$data)){
        if(exists($CONFIG->{$k})){
            $CONFIG->{$k} = $v
        }
    }
}

sub save_config {

    delete($CONFIG->{action});
    DumpFile($CONFIG_FILE, $CONFIG)
}


sub load_command_line_args{
    my $conf = $CONFIG;

    # Mergeamos CONF cas opcions pasadas desde a linea de comandos
    my $opts = {};
    getopts("i:c:p:v:a:RC:S:", $opts);

    $conf->{container} = $opts->{c} if($opts->{c});
    $conf->{image} = $opts->{i} if($opts->{i});
    $conf->{project_volume} = $opts->{v} if($opts->{v});
    $conf->{project} = $opts->{p} if($opts->{p});
    $conf->{action} = $opts->{a} if($opts->{a});
    $conf->{root} = 1 if($opts->{R});

    $conf->{commit} =  $opts->{C} || $opts->{S};

}

sub run_cmd{
    my ($cmd,@rest) = @_;

    print join(' ', $cmd, @rest, "\n");

    system(&split_command($cmd), @rest);
}

sub split_command {
    my ($cmd) = @_;

    my @cmd;
    # 
    # regexp que permite partir por espacios y por bloques entrecomillados
    #
    while($cmd =~ /((\"[^"]+\")|(\'[^']+\')|([^\s]+))\s?/g){
        my $token = $1;
        $token =~ s/(^["']|["']$)//g;
        push @cmd, $token;
    }

    @cmd;

}

